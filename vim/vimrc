set nocompatible
set history=1000
set viminfo^=% "Remeber open buffers on close
set autoread
set autowrite
set timeoutlen=250
set backspace=eol,start,indent
"set cursorline
"set list
"set listchars=tab:▸\ ,eol:¬
set encoding=utf8
set fencs=ucs-bom,utf-8,defeault,latin,cp936,gb2312
set ffs=unix,dos,mac
set hlsearch
set ignorecase
set incsearch
set linebreak
set magic         "Set magic on, for regular expressions
set showmatch     "Show matching bracets when text indicator is over them
set matchtime=2   "How many tenths of a second to show the matching paren
set modeline

set nobackup
set nowritebackup
set noswapfile
set number
set ruler         "Always show current position
set noerrorbells  "No sound on errors
set novisualbell
set vb t_vb=
set showmode
set smartcase
set scrolloff=7

"formatting
set textwidth=80
set smarttab
set expandtab
set tabstop=4
set shiftwidth=4
set autoindent
set smartindent
set foldenable
set foldmethod=marker
set formatoptions=qrn1
set whichwrap+=<,>,h,l
set wrap

syntax enable

set hidden           "Change buffer - without saving
set nolazyredraw     "Don't redraw while executing macros
set ttyfast
set splitright

"commandline
set laststatus=2 "Always show the statusline
set wildmenu
set wildmode=list:longest
set gdefault
set cmdheight=2                                     

iab xdate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>

"Remap VIM 0
map 0 ^
"Useful when moving accross long lines
map j gj
map k gk

let mapleader = ","
let g:mapleader = ","

nnoremap <silent> <leader><cr> :noh<cr>

"Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>
map <leader>ce :cd ~/dev<cr>


"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

set guitablabel=%t

"map <leader>c :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>

map <leader>ss :setlocal spell!<cr>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

""""""""""""""""""""""""""""""
"=> Python section
""""""""""""""""""""""""""""""
python <<EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s"% (p.replace("", r"\ ")))
EOF

"for vim to gf to source code
au FileType python setlocal suffixesadd+=.py
python << EOL
import vim
def EvaluateCurrentRange():
    eval(compile('\n'.join(vim.current.range),'','exec'),globals())
EOL
map <C-e> :py EvaluateCurrentRange()

au BufNewFile,BufRead *.jinja set ft=html
au BufNewFile,BufRead *.j2 set ft=html
au BufNewFile,BufRead *.mako set ft=mako

"Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
map <leader>pp :setlocal paste!<cr>

nnoremap <leader>e :e! $MYVIMRC<cr>
autocmd! bufwritepost vimrc source $MYVIMRC<cr>
nnoremap <leader>ev <c-w><c-v><c-l>:e $MYVIMRC<cr>
nnoremap <leader>w <c-w>v<c-w>l
nmap <F12> :!ctags -R *<cr>

"Scripts and Bundles "{{{
filetype off
set rtp+=~/.vim/vundle.git/
call vundle#rc()

"general must-haves
Bundle "https://github.com/thinca/vim-quickrun.git"
Bundle "https://github.com/tpope/vim-repeat.git"
Bundle "https://github.com/vim-scripts/VisIncr.git"
Bundle "https://github.com/scrooloose/nerdcommenter.git"
Bundle "https://github.com/tpope/vim-surround.git"
Bundle "https://github.com/vim-scripts/matchit.zip.git"
Bundle "https://github.com/Twinside/vim-cuteErrorMarker.git"
Bundle "https://github.com/majutsushi/tagbar.git"
let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>
Bundle "https://github.com/ervandew/supertab.git"
Bundle "https://github.com/godlygeek/tabular.git"
Bundle "https://github.com/vim-scripts/YankRing.vim.git"
Bundle "https://github.com/Raimondi/delimitMate.git"

"Snipmate
Bundle "git@github.com:ricardoshaw/snipmate.vim.git"

"Syntax highlight
Bundle "https://github.com/plasticboy/vim-markdown.git"

"Colorscheme
Bundle "git://github.com/altercation/vim-colors-solarized.git"
Bundle "https://github.com/tomasr/molokai.git"
if has("gui_running")
  set guioptions+=TRrLlb
  set guioptions-=TRrLlb
  set gfn=Monaco\ 10
  "let g:molokai_original = 1
  set background=dark
  colorscheme molokai
else
  colorscheme zellner
  set background=dark
endif

"(HT|X)ML
Bundle "https://github.com/tpope/vim-ragtag.git"
Bundle "http://github.com/rstacruz/sparkup.git", {'rtp': 'vim/'}

"Git
Bundle "https://github.com/tpope/vim-fugitive.git"
Bundle "https://github.com/tpope/vim-git.git"

"Programming languages
Bundle "https://github.com/vim-scripts/OmniCppComplete.git"
Bundle "https://github.com/vim-scripts/javacomplete.git"
Bundle "https://github.com/rosstimson/scala-vim-support.git"
"TeX related
Bundle "git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex"
"Python realted
Bundle "https://github.com/kevinw/pyflakes.git"
Bundle "git://github.com/kevinw/pyflakes-vim.git"
Bundle "https://github.com/cburroughs/pep8.py.git"
Bundle "https://github.com/vim-scripts/pep8.git"
let g:pep8_map='<leader>8'

Bundle "https://github.com/alfredodeza/pytest.vim.git"
Bundle "https://github.com/fs111/pydoc.vim.git"

"Command-T
Bundle "https://github.com/wincent/Command-T.git"
let g:CommandTMaxHeight = 15
set wildignore+=*.o,*.obj,.git,*.pyc
noremap <leader>y :CommandTFlush<cr>

"BufExplorer
Bundle "https://github.com/vim-scripts/bufexplorer.zip.git"
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=1
let g:bufExplorerSortBy='name'
map <leader>o :BufExplorer<cr>

"Ack
Bundle "https://github.com/mileszs/ack.vim.git"
noremap <LocalLeader># "ayiw:Ack <C-r>a<CR>
vnoremap <LocalLeader># "ay:Ack <C-r>a<CR>

"FuzzyFinder
Bundle "https://github.com/vim-scripts/L9.git"
Bundle "https://github.com/vim-scripts/FuzzyFinder.git"
nnoremap <leader>v :FufDir<cr>
nnoremap <leader>f :FufFile<cr>
nnoremap <silent> <LocalLeader>3  :FufBuffer<CR>

"Visual Search
Bundle "https://github.com/bronson/vim-visual-star-search.git"

"mru
Bundle "https://github.com/vim-scripts/mru.vim.git"
let MRU_Max_Entries = 400
map <leader>m :MRU<CR>
filetype plugin indent on  "enable loading indent file for filetype "}}}"}}}
